
call_tree

train.py
    |--trainer
        |--train()
            |--epoch_train()#for epochs
                |-- outputs, losses = self.batch_train(inputs)  #for batchs
                    |-- predict_poses()
                    |-- generate_images_pred()
                    |-- compute_losses()
                        |-- compute_reprojection_loss()
                |-- compute_depth_losses()
                |-- log()
                |-- val()# a batch
                    |-- precess_batch
            |--save_model()



scales = 4
batch_size = B
height = 192 = h
width = 640 = w
channel = c

#inputs
                    shape
'color','frame_idx_in_sq','scale_idx'
('color',0,0)       (b,c,h,w)
('color',0,1)       (b,c,h/2,w/2)
('color',0,2)       (b,c,h/4,w/4)
('color',0,3)       (b,c,h/8,w/8) = (5,3,24,80)

('color',-1,0)       (b,c,h,w)
('color',-1,1)       (b,c,h/2,w/2)
('color',-1,2)       (b,c,h/4,w/4)
('color',-1,3)       (b,c,h/8,w/8) = (5,3,24,80)

('color',1,0)       (b,c,h,w)
('color',1,1)       (b,c,h/2,w/2)
('color',1,2)       (b,c,h/4,w/4)
('color',1,3)       (b,c,h/8,w/8) = (5,3,24,80)



('color_aug',0,0)   (b,c,h,w)
('color_aug',0,1)   (b,c,h/2,w/2)
('color_aug',0,2)   (b,c,h/4,w/4)
('color_aug',0,3)   (b,c,h/8,w/8)

('color_aug',-1,0)   (b,c,h,w)
('color_aug',-1,1)   (b,c,h/2,w/2)
('color_aug',-1,2)   (b,c,h/4,w/4)
('color_aug',-1,3)   (b,c,h/8,w/8)

('color_aug',1,0)   (b,c,h,w)
('color_aug',1,1)   (b,c,h/2,w/2)
('color_aug',1,2)   (b,c,h/4,w/4)
('color_aug',1,3)   (b,c,h/8,w/8)


K0.shape = [5,4,4] = [b,4,4]

372, 0, 320, 0
0, 368.64, 96, 0,
0,0,1,0,
0,0,0,1
#后面五个都是上面重复


K1
185.6,0,160,0,
0,184.32,48,0,
0,0,1,0
0,0,0,1

k2
92.8,0,80,0
0,92.16,24,0
0,0,1,0
0,0,0,1

K3
46.4, 0, 40, 0
0,46.08, 12,0
0,0,1,0
0,0,0,1



DEPTH

[B,1,375,1242]


#outputs

    #outputs[("disp"0)]
    #outputs[("disp"1)]
    #outputs[("disp"2)]
    #outputs[("disp"3)]

#predict_poses gets

    #outputs[("axisangle",0,-1)]
    #outputs[("translation",0,-1)]
    #outputs[("cam_T_cam",0,-1)]

    #outputs[("axisangle",0,1)]
    #outputs[("translation",0,1)]
    #outputs[("cam_T_cam",0,1)]

generate_images_pred gets

    (depth,0,0)


    (sample,0,0)

    (color,,,)


    (color_identity,0,0)




#value 如下

#outputs[("axisangle",0,-1)].shape == [b,2,1,3]

tensor([[[[ 4.8495e-04, -5.4133e-04, -5.6028e-04]],

         [[-7.8870e-05, -1.0486e-04,  1.9999e-04]]],


        [[[ 4.4422e-04, -4.6092e-04, -5.3401e-04]],

         [[-1.5275e-04, -1.8429e-04,  2.5417e-04]]],


        [[[ 4.7208e-04, -5.2723e-04, -6.0050e-04]],

         [[-6.1108e-05, -9.1130e-05,  1.6447e-04]]],


        [[[ 4.0107e-04, -4.4185e-04, -5.3273e-04]],

         [[-1.6522e-04, -1.5764e-04,  2.3232e-04]]],


        [[[ 4.4721e-04, -5.2123e-04, -5.6733e-04]],

         [[-1.2039e-04, -9.6592e-05,  1.9293e-04]]]], device='cuda:0',
       grad_fn=<SliceBackward>)

#outputs[("axisangle",0,-1)].shape ==[b,2,1,3]
tensor([[[[ 1.1130e-04,  3.8863e-04, -2.3497e-04]],

         [[-5.4953e-04, -5.9610e-04,  1.6814e-04]]],


        [[[ 1.3817e-04,  4.7215e-04, -3.3668e-04]],

         [[-5.6436e-04, -5.7970e-04,  2.4249e-04]]],


        [[[ 7.2737e-05,  3.9955e-04, -2.4864e-04]],

         [[-5.1553e-04, -6.2173e-04,  1.8017e-04]]],


        [[[ 8.7321e-05,  3.9456e-04, -3.9935e-04]],

         [[-5.7082e-04, -6.6957e-04,  2.1629e-04]]],


        [[[ 9.7082e-05,  4.1146e-04, -2.6700e-04]],

         [[-5.4502e-04, -6.3621e-04,  1.7193e-04]]]], device='cuda:0',
       grad_fn=<SliceBackward>)


outputs[("cam_T_cam",0,-1)].shape ==[b,4,4]
tensor([[[ 1.0000e+00, -5.6035e-04,  5.4113e-04, -1.1096e-04],
         [ 5.6009e-04,  1.0000e+00,  4.8505e-04, -3.8858e-04],
         [-5.4140e-04, -4.8475e-04,  1.0000e+00,  2.3522e-04],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00]],

        [[ 1.0000e+00, -5.3405e-04,  4.6074e-04, -1.3777e-04],
         [ 5.3384e-04,  1.0000e+00,  4.4429e-04, -4.7208e-04],
         [-4.6098e-04, -4.4404e-04,  1.0000e+00,  3.3695e-04],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00]],

        [[ 1.0000e+00, -6.0056e-04,  5.2703e-04, -7.2366e-05],
         [ 6.0032e-04,  1.0000e+00,  4.7218e-04, -3.9948e-04],
         [-5.2731e-04, -4.7188e-04,  1.0000e+00,  2.4887e-04],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00]],

        [[ 1.0000e+00, -5.3274e-04,  4.4170e-04, -8.6934e-05],
         [ 5.3258e-04,  1.0000e+00,  4.0113e-04, -3.9445e-04],
         [-4.4190e-04, -4.0091e-04,  1.0000e+00,  3.9955e-04],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00]],

        [[ 1.0000e+00, -5.6739e-04,  5.2104e-04, -9.6710e-05],
         [ 5.6715e-04,  1.0000e+00,  4.4731e-04, -4.1140e-04],
         [-5.2130e-04, -4.4700e-04,  1.0000e+00,  2.6724e-04],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00]]],
       device='cuda:0', grad_fn=<UnsafeViewBackward>)




   abs_rel |   sq_rel |     rmse | rmse_log |       a1 |       a2 |       a3 |
&   0.121  &   1.014  &   4.954  &   0.194  &   0.873  &   0.959  &   0.981  \\